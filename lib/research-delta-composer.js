// Generated by CoffeeScript 1.7.1
module.exports = function(mongoose) {
  var Delta, _aggregateDeltas, _compose;
  Delta = require('./models/Delta')(mongoose);
  _aggregateDeltas = function(deltas) {
    var args, cache, delta, document, hit, i, j, k, newSection, newSubSection, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    document = {
      sections: []
    };
    cache = {};
    if (deltas.length > 0) {
      for (i = _i = 0, _ref = deltas.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        delta = deltas[i];
        args = delta.args;
        switch (delta.name) {
          case 'section.add':
            newSection = {
              id: args.section_id,
              title: '',
              contents: '',
              subsections: []
            };
            document.sections.splice(args.index, 0, newSection);
            cache[args.section_id] = {
              item: newSection,
              container: document.sections
            };
            break;
          case 'section.delete':
            hit = cache[args.section_id];
            if (hit) {
              hit.container.splice(hit.container.indexOf(hit.item), 1);
              delete cache[args.section_id];
            }
            break;
          case 'subsection.add':
            hit = cache[args.section_id];
            if (hit) {
              newSubSection = {
                id: args.subsection_id,
                title: '',
                contents: '',
                subsubsections: []
              };
              hit.item.subsections.splice(args.index, 0, newSubSection);
              cache[args.subsection_id] = {
                item: newSubSection({
                  container: hit.item
                })
              };
            }
            break;
          case 'subsection.delete':
            hit = cache[args.subsection_id];
            if (hit) {
              hit.container.splice(hit.container.indexOf(hit.item), 1);
              delete cache[args.subsection_id];
            }
            break;
          case 'subsubsection.add':
            for (i = _j = 0, _ref1 = document.sections.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              if (document.sections[i].id === args.section_id) {
                for (j = _k = 0, _ref2 = document.sections[i].subsections.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
                  if (document.sections[i].subsections[j].id === args.subsection_id) {
                    document.sections[i].subsections[j].subsubsections.splice(args.index, 0, {
                      id: args.subsubsection_id,
                      title: '',
                      contents: ''
                    });
                  }
                }
              }
            }
            break;
          case 'subsubsection.delete':
            for (i = _l = 0, _ref3 = document.sections.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
              if (document.sections[i].id === args.section_id) {
                for (j = _m = 0, _ref4 = document.sections[i].subsections.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; j = 0 <= _ref4 ? ++_m : --_m) {
                  if (document.sections[i].subsections[j].id === args.subsection_id) {
                    for (k = _n = 0, _ref5 = document.sections[i].subsections[j].subsubsections.length - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; k = 0 <= _ref5 ? ++_n : --_n) {
                      if (document.sections[i].subsections[j].subsubsections[k].id === args.subsubsection_id) {
                        document.sections[i].subsections[j].subsubsections.splice(k, 1);
                        break;
                      }
                    }
                  }
                }
              }
            }
        }
      }
    }
    return document;
  };
  _compose = function(docid, startingFrom, callback) {
    return Delta.find({
      document: docid
    }).sort('timestamp').exec(function(err, deltas) {
      var document;
      if (err) {
        console.log('Fetch Error!');
        console.log(err);
        return typeof callback === "function" ? callback('Error Fetching Deltas!', null) : void 0;
      } else {
        document = _aggregateDeltas(deltas);
        return typeof callback === "function" ? callback(null, document) : void 0;
      }
    });
  };
  return {
    compose: _compose
  };
};

//# sourceMappingURL=research-delta-composer.map
