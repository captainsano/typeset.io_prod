// Generated by CoffeeScript 1.7.1
var app, bodyParser, cors, mongoose;

cors = require('cors');

app = require('express')();

bodyParser = require('body-parser');

app.use(cors({
  origin: true,
  credentials: true
}));

app.use(bodyParser.json());

mongoose = require('mongoose');

mongoose.connect('mongodb://localhost/typeset', function(err) {
  var Document, io, namespaceDefined, namespaces, server;
  if (err) {
    console.log('MongoDB connection failed!');
  } else {
    console.log('MongoDB Connected!');
    server = app.listen(8888, function() {
      return console.log('Listening on port ' + 8888);
    });
    io = require('socket.io')(server);
    io.on('connection', function(socket) {
      console.log('New Socket Connected!');
      require('./lib/doc')(socket, mongoose);
      return socket.on('disconnect', function(socket) {
        return console.log('Socket Disconnected!');
      });
    });
    Document = require('./lib/models/Document')(mongoose);
    namespaces = [];
    namespaceDefined = function(docid) {
      return namespaces.indexOf(docid) >= 0;
    };
    app.post('/research', function(req, res) {
      var Composer, docid;
      Composer = require('./lib/research-delta-composer')(mongoose);
      docid = req.param('docid');
      console.log('Setting up namespace for: ' + docid);
      return Document.findOne({
        _id: docid
      }, function(err, document) {
        var docSock;
        if (err || !document) {
          console.log('Failed to setup namespace: ' + docid);
          return res.json({
            code: 400,
            error: 'Invalid Document'
          });
        } else {
          if (!namespaceDefined(docid)) {
            docSock = io.of('/' + docid);
            namespaces.push(docid);
            docSock.on('connection', function(socket) {
              console.log('Socket connected for document: ' + docid);
              require('./lib/research-editor')(socket, mongoose, document);
              return socket.on('disconnect', function(socket) {
                return console.log('Disconnected socket for ' + docid);
              });
            });
            Composer.compose(docid, 0, function(err, document) {
              return res.json({
                code: 200,
                data: document
              });
            });
            return console.log('Setup namespace: ' + docid);
          } else {
            console.log('namespace and handler defined already!');
            return Composer.compose(docid, 0, function(err, document) {
              return res.json({
                code: 200,
                data: document
              });
            });
          }
        }
      });
    });
  }
});

//# sourceMappingURL=index.map
